{"version":3,"sources":["components/GeneralInfo.js","components/EducationExp.js","components/PracticalExp.js","components/CVInput.js","App.js","index.js"],"names":["GeneralInfo","props","updateGeneralInfo","bind","state","firstName","lastName","email","phone","e","name","target","value","this","setState","liftStateToCVInput","onChange","type","id","required","minLength","Component","EducationExp","toggleIsAdding","isAddingEd","updateCurExp","changeExp","exp","saveExp","preventDefault","experiences","edExp","concat","cancelExp","city","degree","startDate","endDate","uniqid","displayAddExpBtn","onClick","toggleIsEditing","innerText","parentNode","getAttribute","copyArrayOfObj","expInd","findIndex","isEditingExp","expInEdit","saveExpEdit","saveExpEditOnChange","editExperience","maxLength","length","map","strOfProperties","key","className","displayExperiences","displayBlankForm","PracticalExp","isAddingExp","practExp","title","CVInput","console","log","generalInfo","educationExp","practicalExp","arr","obj","JSON","parse","stringify","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f61b7802.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass GeneralInfo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateGeneralInfo = this.updateGeneralInfo.bind(this); // in lieu of binding like this, updateGeneralInfo could be turned into an arrow function\n\n    this.state = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: 0 \n    }\n  };\n\n  updateGeneralInfo(e) {\n    const name = e.target.name;\n    const value = e.target.value;\n\n    if(name === 'first-name') {\n      this.setState({firstName: value}, () => this.props.liftStateToCVInput('generalInfo', this.state))\n    }\n    else if(name === 'last-name') {\n      this.setState({lastName: value}, () => this.props.liftStateToCVInput('generalInfo', this.state))\n    } \n    else if(name === 'email') {\n      this.setState({email: value}, () => this.props.liftStateToCVInput('generalInfo', this.state))\n    } \n    else if(name === 'phone') {\n      this.setState({phone: value}, () => this.props.liftStateToCVInput('generalInfo', this.state))\n    }\n  }\n\n  render() {\n\n    return (\n      <form>\n        <h1>Personal Info</h1>\n        <div>\n            <label name=\"first-name\">First Name</label>\n            <input onChange={this.updateGeneralInfo} type=\"text\" id=\"first-name\" name=\"first-name\" value={this.state.firstName} required minLength=\"1\"></input>\n        </div>\n        <div>\n            <label name=\"last-name\">Last Name</label>\n            <input onChange={this.updateGeneralInfo} type=\"text\" id=\"last-name\" name=\"last-name\" value={this.state.lastName} required minLength=\"1\"></input>\n        </div>\n        <div>\n            <label name=\"email\">Email</label>\n            <input onChange={this.updateGeneralInfo} type=\"text\" id=\"email\" name=\"email\" value={this.state.email} required minLength=\"1\"></input>\n        </div>\n        <div>\n            <label name=\"phone\">Phone</label>\n            <input onChange={this.updateGeneralInfo} type=\"text\" id=\"phone\" name=\"phone\" value={this.state.phone} required minLength=\"1\"></input>\n        </div>\n      </form>\n    );\n  }\n};\n\nexport default GeneralInfo;","import React, { Component } from \"react\";\n\nimport uniqid from \"uniqid\";\n\nclass EducationExp extends Component {\n  constructor(props) {\n      super(props);\n\n      this.state = {\n        isAddingEd: false,\n        isEditingExp: false,\n        expInEdit: {},\n        exp: {\n          name: \"\",\n          city: \"\",\n          degree: \"\",\n          startDate: 0,\n          endDate: 0,\n          id: uniqid()\n        },\n      };\n  };\n\n  toggleIsAdding= () => {\n    this.state.isAddingEd ? this.setState({isAddingEd: false}) : this.setState({isAddingEd: true});\n  };\n\n  updateCurExp = (e) => {\n    const changeExp = this.state.exp;\n    let id = e.target.id;\n    if(id === 'start-date') {\n      id = 'startDate'\n    } else if(id === 'end-date') {\n      id = 'endDate'\n    }\n    changeExp[id] = e.target.value;\n    this.setState({exp: changeExp});\n  };\n\n  saveExp = (e) => {\n    e.preventDefault();\n\n    const experiences = this.props.edExp.concat(this.state.exp);\n    this.props.liftStateToCVInput('educationExp', experiences);\n    this.cancelExp(e)\n  };\n\n  cancelExp = (e) => {\n    e.preventDefault();\n\n    this.setState({\n      exp: { \n        name: \"\",\n        city: \"\",\n        degree: \"\",\n        startDate: 0,\n        endDate: 0,\n        id: uniqid()\n      }\n    }, this.toggleIsAdding);\n  };\n\n  displayAddExpBtn = () => {\n    if (!this.state.isAddingEd) {\n      return <button onClick={this.toggleIsAdding}>+</button>\n    }\n  };\n\n  toggleIsEditing = (e) => {\n    let exp;\n    if (e) {\n      if (e.target.innerText === 'Cancel') {\n        e.preventDefault();\n      } else {\n        const id = e.target.parentNode.getAttribute('id');\n        const experiences = this.props.copyArrayOfObj(this.props.edExp);\n        const expInd = experiences.findIndex((exp) => exp.id === id);\n        exp = experiences[expInd];\n      }\n    }\n    this.state.isEditingExp ? this.setState({isEditingExp: false, expInEdit: {}}) : this.setState({isEditingExp: true, expInEdit: exp});\n  };\n\n  saveExpEdit = (e) => {\n    e.preventDefault();\n    const experiences = this.props.edExp;\n    const expInd = experiences.findIndex((exp) => exp.id === this.state.expInEdit.id);\n    experiences[expInd] = this.state.expInEdit;\n    this.props.liftStateToCVInput('educationExp', experiences);\n    this.toggleIsEditing(); // should I pass e into this function???\n  };\n\n  saveExpEditOnChange = (e) => {\n    const changeExp = this.state.expInEdit;\n    let id = e.target.id;\n    if(id === 'start-date') {\n      id = 'startDate'\n    } else if(id === 'end-date') {\n      id = 'endDate'\n    }\n    changeExp[id] = e.target.value;\n    this.setState({expInEdit: changeExp});\n  };\n\n  editExperience = () => {\n    const exp = this.state.expInEdit;\n    const form =\n      <form>\n        <div>\n            <label name=\"name\">University / School name</label>\n            <input type=\"text\" id=\"name\" name=\"name\" onChange={this.saveExpEditOnChange} value={exp.name} required minLength=\"1\"></input>\n        </div>\n        <div>\n            <label name=\"city\">City</label>\n            <input type=\"text\" id=\"city\" name=\"city\"  onChange={this.saveExpEditOnChange} value={exp.city} required minLength=\"1\"></input>\n        </div>\n        <div>\n            <label name=\"degree\">Degree / Certification</label>\n            <input type=\"text\" id=\"degree\" name=\"degree\" onChange={this.saveExpEditOnChange} value={exp.degree} required minLength=\"1\"></input>\n        </div>\n        <div>\n            <label name=\"start-date\">Start date</label>\n            <input type=\"text\" id=\"start-date\" name=\"start-date\" onChange={this.saveExpEditOnChange} value={exp.startDate} required minLength=\"4\" maxLength=\"4\"></input>\n\n            <label name=\"end-date\">End date</label>\n            <input type=\"text\" id=\"end-date\" name=\"end-date\" onChange={this.saveExpEditOnChange} value={exp.endDate} required minLength=\"4\" maxLength=\"4\"></input>\n        </div>\n        <div>\n            <button onClick={this.toggleIsEditing}>Cancel</button>\n            <button onClick={this.saveExpEdit}>Save edit</button>\n        </div>\n      </form>;\n      return form\n  };\n\n  displayExperiences() {\n    if (this.props.edExp.length) {\n      const elExperiences = \n        <div>\n          <ul>\n            {this.props.edExp.map((exp) => {\n              const elExp = \n                <li key={exp.id} id={exp.id}>\n                  { (() => {\n                        let strOfProperties = '';\n                        for (const key in exp ) {\n                          if (key !== 'id') {\n                            strOfProperties += exp[key] + ' '\n                        }}\n                        return strOfProperties\n                  })()}\n                  <button onClick={this.toggleIsEditing}>edit</button>\n                </li>;\n              return elExp\n            })}\n          </ul>\n        </div>\n\n      return elExperiences\n    }\n  }\n\n  displayBlankForm() {\n    if (this.state.isAddingEd) {\n      const form = \n      <form>\n        <div>\n            <label name=\"name\">University / School name</label>\n            <input onChange={this.updateCurExp} type=\"text\" id=\"name\" name=\"name\" value={this.state.exp.name} required minLength=\"1\"></input>\n        </div>\n        <div>\n            <label name=\"city\">City</label>\n            <input onChange={this.updateCurExp} type=\"text\" id=\"city\" name=\"city\" value={this.state.exp.city} required minLength=\"1\"></input>\n        </div>\n        <div>\n            <label name=\"degree\">Degree / Certification</label>\n            <input onChange={this.updateCurExp} type=\"text\" id=\"degree\" name=\"degree\" value={this.state.exp.degree} required minLength=\"1\"></input>\n        </div>\n        <div>\n            <label name=\"start-date\">Start date</label>\n            <input onChange={this.updateCurExp} type=\"text\" id=\"start-date\" name=\"start-date\" value={this.state.exp.startDate} required minLength=\"4\" maxLength=\"4\"></input>\n\n            <label name=\"end-date\">End date</label>\n            <input onChange={this.updateCurExp} type=\"text\" id=\"end-date\" name=\"end-date\" value={this.state.exp.endDate} required minLength=\"4\" maxLength=\"4\"></input>\n        </div>\n        <div>\n            <button onClick={this.cancelExp}>Cancel</button>\n            <button type=\"submit\" onClick={this.saveExp}>Save</button>\n        </div>\n      </form>;\n\n      return form;\n    }\n  };\n\n  render() {\n\n    return (\n      <div>\n        <div className=\"Heading\">\n            <h1>Education</h1>\n            \n            {this.displayAddExpBtn()}\n        </div>\n        { this.state.isEditingExp\n          ? this.editExperience()\n          : this.displayExperiences()\n        }\n        {this.displayBlankForm()}\n      </div>\n    );\n  }\n};\n\nexport default EducationExp;\n","import React, { Component } from \"react\";\n\nimport uniqid from \"uniqid\";\n\nclass PracticalExp extends Component {\n  constructor(props) {\n      super(props);\n\n      this.state = {\n        isAddingExp: false,\n        isEditingExp: false,\n        expInEdit: {},\n        exp: {\n          title: \"\",\n          name: \"\",\n          city: \"\",\n          startDate: 0,\n          endDate: 0,\n          id: uniqid()\n        }\n      };\n  };\n\n  toggleIsAdding = () => {\n    this.state.isAddingExp ? this.setState({isAddingExp: false}) : this.setState({isAddingExp: true});\n  };\n\n  updateCurExp = (e) => {\n    const changeExp = this.state.exp;\n    let id = e.target.id;\n    if(id === 'start-date') {\n      id = 'startDate'\n    } else if(id === 'end-date') {\n      id = 'endDate'\n    }\n    changeExp[id] = e.target.value;\n    this.setState({exp: changeExp});\n  };\n\n  saveExp = (e) => {\n    e.preventDefault();\n\n    const experiences = this.props.practExp.concat(this.state.exp);\n    this.props.liftStateToCVInput('practicalExp', experiences);\n    this.cancelExp(e)\n  };\n\n  cancelExp = (e) => {\n    e.preventDefault();\n\n    this.setState({\n      exp: {\n        title: \"\",\n        name: \"\",\n        city: \"\",\n        startDate: 0,\n        endDate: 0,\n        id: uniqid()\n      }\n    }, this.toggleIsAdding);\n  };\n\n  displayAddExpBtn = () => {\n    if (!this.state.isAddingExp) {\n      return <button onClick={this.toggleIsAdding}>+</button>\n    }\n  };\n\n  toggleIsEditing = (e) => {\n    let exp;\n    if (e) {\n      if (e.target.innerText === 'Cancel') {\n        e.preventDefault();\n      } else {\n        const id = e.target.parentNode.getAttribute('id');\n        const experiences = this.props.copyArrayOfObj(this.props.practExp);\n        const expInd = experiences.findIndex((exp) => exp.id === id);\n        exp = experiences[expInd];\n      }\n    }\n    this.state.isEditingExp ? this.setState({isEditingExp: false, expInEdit: {}}) : this.setState({isEditingExp: true, expInEdit: exp});\n  };\n\n  saveExpEdit = (e) => {\n    e.preventDefault();\n    const experiences = this.props.practExp;\n    const expInd = experiences.findIndex((exp) => exp.id === this.state.expInEdit.id);\n    experiences[expInd] = this.state.expInEdit;\n    this.props.liftStateToCVInput('practicalExp', experiences);\n    this.toggleIsEditing();\n  };\n\n  saveExpEditOnChange = (e) => {\n    const changeExp = this.state.expInEdit;\n    let id = e.target.id;\n    if(id === 'start-date') {\n      id = 'startDate'\n    } else if(id === 'end-date') {\n      id = 'endDate'\n    }\n    changeExp[id] = e.target.value;\n    this.setState({expInEdit: changeExp});\n  };\n\n  editExperience = () => {\n    const exp = this.state.expInEdit;\n    const form =\n      <form>\n        <div>\n            <label name=\"title\">Title</label>\n            <input type=\"text\" id=\"title\" name=\"title\" onChange={this.saveExpEditOnChange} value={exp.title} required minLength=\"1\"></input>\n        </div>\n        <div>\n            <label name=\"name\">Company Name</label>\n            <input type=\"text\" id=\"name\" name=\"name\"  onChange={this.saveExpEditOnChange} value={exp.name} required minLength=\"1\"></input>\n        </div>\n        <div>\n            <label name=\"city\">City</label>\n            <input type=\"text\" id=\"city\" name=\"city\" onChange={this.saveExpEditOnChange} value={exp.city} required minLength=\"1\"></input>\n        </div>\n        <div>\n            <label name=\"start-date\">Start date</label>\n            <input type=\"text\" id=\"start-date\" name=\"start-date\" onChange={this.saveExpEditOnChange} value={exp.startDate} required minLength=\"4\" maxLength=\"4\"></input>\n\n            <label name=\"end-date\">End date</label>\n            <input type=\"text\" id=\"end-date\" name=\"end-date\" onChange={this.saveExpEditOnChange} value={exp.endDate} required minLength=\"4\" maxLength=\"4\"></input>\n        </div>\n        <div>\n            <button onClick={this.toggleIsEditing}>Cancel</button>\n            <button onClick={this.saveExpEdit}>Save edit</button>\n        </div>\n      </form>;\n      return form\n  };\n\n  displayExperiences() {\n    if (this.props.practExp.length) {\n      const elExperiences = \n        <div>\n          <ul>\n            {this.props.practExp.map((exp) => {\n              const elExp = \n                <li key={exp.id} id={exp.id}>\n                  { (() => {\n                        let strOfProperties = '';\n                        for (const key in exp ) {\n                          if (key !== 'id') {\n                            strOfProperties += exp[key] + ' '\n                        }}\n                        return strOfProperties\n                  })()}\n                  <button onClick={this.toggleIsEditing}>edit</button>\n                </li>;\n              return elExp\n            })}\n          </ul>\n        </div>\n\n      return elExperiences\n    }\n  }\n\n  displayBlankForm() {\n    if (this.state.isAddingExp) {\n      const form =\n        <form>\n          <div>\n              <label name=\"title\">Title</label>\n              <input onChange={this.updateCurExp} type=\"text\" id=\"title\" name=\"title\" value={this.state.exp.title} required minLength=\"1\"></input>\n          </div>\n          <div>\n              <label name=\"name\">Company Name</label>\n              <input onChange={this.updateCurExp} type=\"text\" id=\"name\" name=\"name\" value={this.state.exp.name} required minLength=\"1\"></input>\n          </div>\n          <div>\n              <label name=\"city\">City</label>\n              <input onChange={this.updateCurExp} type=\"text\" id=\"city\" name=\"city\" value={this.state.exp.city} required minLength=\"1\"></input>\n          </div>\n          <div>\n              <label name=\"start-date\">Start date</label>\n              <input onChange={this.updateCurExp} type=\"text\" id=\"start-date\" name=\"start-date\" value={this.state.exp.startDate} required minLength=\"4\" maxLength=\"4\"></input>\n\n              <label name=\"end-date\">End date</label>\n              <input onChange={this.updateCurExp} type=\"text\" id=\"end-date\" name=\"end-date\" value={this.state.exp.endDate} required minLength=\"4\" maxLength=\"4\"></input>\n          </div>\n          <div>\n              <button onClick={this.cancelExp}>Cancel</button>\n              <button onClick={this.saveExp}>Save</button>\n          </div>\n        </form>;\n\n      return form\n    }\n  };\n\n  render() {\n\n    return (\n      <div>\n        <div className=\"Heading\">\n            <h1>Experience</h1>\n            {this.displayAddExpBtn()}\n        </div>\n        { this.state.isEditingExp\n          ? this.editExperience()\n          : this.displayExperiences()\n        }\n        {this.displayBlankForm()}\n      </div>\n    );\n  }\n};\n\nexport default PracticalExp;","import React, { Component } from \"react\";\n\nimport GeneralInfo from \"./GeneralInfo\";\n\nimport EducationExp from \"./EducationExp\";\n\nimport PracticalExp from \"./PracticalExp\";\n\n\n\nclass CVInput extends Component {\n  constructor(props) {\n      super(props);\n\n      this.state = {\n        generalInfo: { /*\n          firstName: '',\n          lastName: '',\n          email: '',\n          phone: 0 */\n        },\n        educationExp: [\n          /*{\n            name: ,\n            city: ,\n            degree: ,\n            startDate: ,\n            endDate:\n          },\n          {}, ...*/\n        ],\n        practicalExp: [\n          /*{\n            title: ,\n            name: ,\n            city: ,\n            startDate: ,\n            endDate: \n          },\n          {}, ...*/\n        ],\n      };\n  };\n\n  liftStateToCVInput = (name, value) => {\n    this.setState({[name]: value}, () => console.log(\"CVInput's state\", this.state));\n  };\n\n  copyArrayOfObj(arr) {\n    const newArray = arr.map((obj) => JSON.parse(JSON.stringify(obj)));\n    return newArray\n  };\n\n  render() {\n\n    return (\n      <div className=\"cv-inputs\" >\n          <GeneralInfo liftStateToCVInput={this.liftStateToCVInput} />\n          <EducationExp liftStateToCVInput={this.liftStateToCVInput} edExp={this.state.educationExp} copyArrayOfObj={this.copyArrayOfObj} />\n          <PracticalExp liftStateToCVInput={this.liftStateToCVInput} practExp={this.state.practicalExp} copyArrayOfObj={this.copyArrayOfObj} />\n      </div>\n    );\n  }\n};\n\nexport default CVInput;\n","import React from \"react\";\n\nimport CVInput from \"./components/CVInput\";\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Curriculum vitae</p>\n      </header>\n      <div>\n        <CVInput />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}